package alipay_sdk.test

import alipay_sdk.getAsyncCallBackMsgSource
import std.unittest.*
import std.unittest.testmacro.*
// 待签名字符串
const TEST_SOURCE = #"app_id=2018051460120527&auth_app_id=2018051460120527&buyer_id=2088102051478752&buyer_logon_id=159****9805&buyer_pay_amount=1.80&charset=utf-8&fund_bill_list=[{"amount":"1.80","fundChannel":"ALIPAYACCOUNT"}]&gmt_create=2025-03-10 11:36:58&gmt_payment=2025-03-10 11:36:58&invoice_amount=1.80&notify_id=2025031001222113658078751456190861&notify_time=2025-03-10 11:50:49&notify_type=trade_status_sync&out_trade_no=67c7ff794d06060001ada651&point_amount=0.00&receipt_amount=1.80&seller_email=finances@quantibio.com&seller_id=2088411714187990&subject=量化益生菌&total_amount=1.80&trade_no=2025031022001478751419336105&trade_status=TRADE_SUCCESS&version=1.0"#

// 支付宝消息签名
const TEST_SIGN = "LAYYO/0JLEbbLCSBgxMVsJuSZ7Gz/6GZfaLmRZVYl6B+PnUfZlU57MTrmhoQgeBCjEgphCO2X5tIaZKae3/cQzDRV5imkhTu4U5JcNhGNUx8zNXfEd5IXP5AH11sGE1amArJ/W4rjc3OkVIptKF7aIR3/bApcWk+oNGCQwt4YFAUFJXEDqOzE8UJdaognZ/4fR5yweaMpdemkJ+qN024LBXtKGtb2y7z7jiabRLCNjc6+mwjuUB0OtH02xLTE5JI9ab1BfKSJY2sxW7LtIpnv+s0X62UwydrqEaHVlbfDCX3Gj2gRE1bL2Gwe62q/vS34Pl0gKbFE1j1JdSFd5KjxA=="
const TEST_RAW_BODY = #"gmt_create=2025-03-10+11:36:58&charset=utf-8&seller_email=finances@quantibio.com&subject=量化益生菌&sign=LAYYO/0JLEbbLCSBgxMVsJuSZ7Gz/6GZfaLmRZVYl6B+PnUfZlU57MTrmhoQgeBCjEgphCO2X5tIaZKae3/cQzDRV5imkhTu4U5JcNhGNUx8zNXfEd5IXP5AH11sGE1amArJ/W4rjc3OkVIptKF7aIR3/bApcWk+oNGCQwt4YFAUFJXEDqOzE8UJdaognZ/4fR5yweaMpdemkJ+qN024LBXtKGtb2y7z7jiabRLCNjc6+mwjuUB0OtH02xLTE5JI9ab1BfKSJY2sxW7LtIpnv+s0X62UwydrqEaHVlbfDCX3Gj2gRE1bL2Gwe62q/vS34Pl0gKbFE1j1JdSFd5KjxA==&buyer_id=2088102051478752&invoice_amount=1.80&notify_id=2025031001222113658078751456190861&fund_bill_list=[{"amount":"1.80","fundChannel":"ALIPAYACCOUNT"}]&notify_type=trade_status_sync&trade_status=TRADE_SUCCESS&receipt_amount=1.80&buyer_pay_amount=1.80&app_id=2018051460120527&sign_type=RSA2&seller_id=2088411714187990&gmt_payment=2025-03-10+11:36:58&notify_time=2025-03-10+11:50:49&version=1.0&out_trade_no=67c7ff794d06060001ada651&total_amount=1.80&trade_no=2025031022001478751419336105&auth_app_id=2018051460120527&buyer_logon_id=159****9805&point_amount=0.00"#

/* ===== Emitted by MacroCall @Test in until_test.cj:13:1 ===== */
/* 13.1 */@Attribute[TEST_GENERATED] class TestCase_getAsyncCallBackMsgSourceTest <: TestClass {
/* 13.2 */    init() {
/* 13.3 */    }
/* 13.4 */    private func classConfiguration(): Configuration {
/* 13.5 */        let configuration = Configuration()
/* 13.6 */        configuration.set(KeyFromTopLevel.fromTopLevel, true)
/* 13.7 */        
/* 13.8 */        return configuration
/* 13.9 */    }
/* 13.10 */    public override func asTestSuite(): TestSuite {
/* 13.11 */        
/* 13.12 */        let suiteConfiguration = classConfiguration()
/* 13.13 */        let suiteBuilder = TestSuite.builder("TestCase_getAsyncCallBackMsgSourceTest").configure(suiteConfiguration)
/* 13.14 */        
/* 13.15 */        { => let caseConfig = Configuration()
/* 13.16 */            caseConfig.set(KeyFromTopLevel.fromTopLevel, true)
/* 13.17 */            
/* 13.18 */            let getAsyncCallBackMsgSourceTestTestFunc = { => getAsyncCallBackMsgSourceTest();() }
/* 13.19 */            suiteBuilder.add(
/* 13.20 */            UnitTestCase.create(
/* 13.21 */            "getAsyncCallBackMsgSourceTest",
/* 13.22 */            configuration: caseConfig,
/* 13.23 */            body: getAsyncCallBackMsgSourceTestTestFunc
/* 13.24 */            )
/* 13.25 */            )
/* 13.26 */            
/* 13.27 */        }()
/* 13.28 */        
/* 13.29 */        return suiteBuilder.build()
/* 13.30 */    }
/* 13.31 */    private func inheritedFromClassAnnotatedByTestTemplate < T >(): TestSuite where T <: TestClass {
/* 13.32 */        throw Exception("Unreachable code")
/* 13.33 */    }
/* 13.34 */}
/* 13.35 */public func getAsyncCallBackMsgSourceTest() {
/* 13.36 */    let(source, sign, signType) = getAsyncCallBackMsgSource(TEST_RAW_BODY.toArray())
/* 13.37 */    println("test: ${source}")
/* 13.38 */    expectEqual("TEST_SOURCE", "source", TEST_SOURCE, source,)
/* 13.39 */    expectEqual("TEST_SIGN", "sign", TEST_SIGN, sign,)
/* 13.40 */}
/* 13.41 */
/* 13.42 */
/* 13.43 */interface TestPackageExtension_TestCase_getAsyncCallBackMsgSourceTest {
/* 13.44 */    func registerTestCase_getAsyncCallBackMsgSourceTest(): Unit
/* 13.45 */}
/* 13.46 */extend TestPackage <: TestPackageExtension_TestCase_getAsyncCallBackMsgSourceTest {
/* 13.47 */    @Attribute[TEST_REGISTER]
/* 13.48 */    public func registerTestCase_getAsyncCallBackMsgSourceTest() {
/* 13.49 */        registerSuite({ => TestCase_getAsyncCallBackMsgSourceTest().asTestSuite() })
/* 13.50 */    }
/* 13.51 */}
/* 13.52 */
/* ===== End of the Emit ===== */